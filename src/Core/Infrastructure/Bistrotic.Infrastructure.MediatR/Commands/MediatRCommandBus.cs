namespace Bistrotic.Infrastructure.MediatR.Queries
{
    using Bistrotic.Application.Commands;
    using Bistrotic.Application.Messages;

    using global::MediatR;

    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Implements the <see cref="IQueryDispatcher"/>.
    /// </summary>
    /// <seealso cref="IQueryDispatcher"/>
    /// <autogeneratedoc/>
    public class MediatRCommandBus : ICommandBus
    {
        private readonly IMediator _mediator;

        public MediatRCommandBus(IMediator mediator)
        {
            _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));
        }

        public Task Send<TCommand>(Envelope<TCommand> envelope, CancellationToken cancellationToken = default)
            where TCommand : class => _mediator.Send(new MediatREnvelope<TCommand>(envelope), cancellationToken);

        Task ICommandBus.Send(IEnvelope envelope, CancellationToken cancellationToken)
        {
            return _mediator.Send(envelope, cancellationToken);
        }

        public async Task Send(IEnumerable<IEnvelope> list, CancellationToken cancellationToken = default)
        {
            foreach (var e in list)
                await _mediator.Send(e, cancellationToken).ConfigureAwait(false);
        }
    }
}