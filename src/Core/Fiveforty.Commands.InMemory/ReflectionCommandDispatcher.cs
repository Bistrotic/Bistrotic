namespace Fiveforty.Commands.InMemory
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Threading.Tasks;

    using Fiveforty.Infrastructure.Reflection;

    /// <summary>
    /// Class ReflectionCommandDispatcher. Implements the <see cref="Fiveforty.Commands.ICommandDispatcher"/>
    /// </summary>
    /// <seealso cref="Fiveforty.Commands.ICommandDispatcher"/>
    /// <autogeneratedoc/>
    public class ReflectionCommandDispatcher : ICommandDispatcher
    {
        private readonly IEnumerable<Assembly>? _assemblies;
        private readonly object _initLock = new object();
        private readonly IServiceProvider _services;
        private Dictionary<Type, Type>? _handlers;

        public ReflectionCommandDispatcher(IServiceProvider services, IEnumerable<Assembly>? assemblies = null)
        {
            _services = services ?? throw new ArgumentNullException(nameof(services));
            _assemblies = assemblies;
        }

        private Dictionary<Type, Type> Handlers => _handlers ??= InitHandlers();

        /// <summary>
        /// Dispatches the specified command.
        /// </summary>
        /// <typeparam name="TCommand">The type of the t command.</typeparam>
        /// <param name="command">The command.</param>
        /// <returns>Task.</returns>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc/>
        public Task Dispatch<TCommand>(TCommand command) where TCommand : ICommand
        {
            if (!Handlers.TryGetValue(typeof(TCommand), out Type handlerType))
            {
                throw new ArgumentException($"Command handler for {typeof(TCommand).Name} not found", nameof(command));
            }
            if (_services.GetService(handlerType) is not ICommandHandler handler)
            {
                throw new Exception($"Service {handlerType.Name} not found in service provider.");
            }
            return handler.Execute(command);
        }

        private Dictionary<Type, Type> InitHandlers()
        {
            lock (_initLock)
            {
                if (_handlers == null)
                {
                    Type handlerGenericType = typeof(ICommandHandler<>);
                    if (_assemblies != null)
                    {
                        _handlers = _assemblies
                            .SelectMany(p => handlerGenericType.GetConcreteClasses(p))
                            .ToDictionary(k => k.GetInterfaceGenericArguments(handlerGenericType)[0], v => v);
                    }
                }
            }
            return _handlers ?? new Dictionary<Type, Type>();
        }
    }
}