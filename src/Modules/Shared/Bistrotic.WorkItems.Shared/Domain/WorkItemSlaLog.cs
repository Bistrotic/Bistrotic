namespace Bistrotic.WorkItems.Domain
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;

    public class WorkItemSlaLog
    {
        public WorkItemSlaLog(IEnumerable<WorkItemSlaLogItem> log)
        {
            Log = log.OrderBy(p => p.DateTime).ToImmutableList();
        }

        /// <summary>
        /// Gets the acknowledged date time.
        /// </summary>
        /// <value>The acknowledged date time.</value>
        /// <autogeneratedoc/>
        public DateTime? AcknowledgedDateTime
            => Log
            .Where(p => p.InSla || p.State != WorkItemState.New)
            .Select(p => (DateTime?)p.DateTime)
            .FirstOrDefault();

        /// <summary>
        /// Gets the acknowledgment time in seconds.
        /// </summary>
        /// <value>The acknowledgment time in seconds.</value>
        /// <autogeneratedoc/>
        public int AcknowledgmentTimeInSeconds
            => (AcknowledgedDateTime == null) ?
                GetSecondsBetween(DateTime.Now, CreatedDateTime) :
                GetSecondsBetween(AcknowledgedDateTime.Value, CreatedDateTime);

        /// <summary>
        /// Gets the closed date time.
        /// </summary>
        /// <value>The closed date time.</value>
        /// <autogeneratedoc/>
        public DateTime? ClosedDateTime
            => Log.FirstOrDefault(p => p.State == WorkItemState.Closed)?.DateTime;

        /// <summary>
        /// Gets the closed time in seconds.
        /// </summary>
        /// <value>The closed time in seconds.</value>
        /// <autogeneratedoc/>
        public int ClosedTimeInSeconds => (ClosedDateTime == null) ?
                GetSecondsBetween(DateTime.Now, CreatedDateTime) :
                GetSecondsBetween(ClosedDateTime.Value, CreatedDateTime);

        /// <summary>
        /// Gets the created date time.
        /// </summary>
        /// <value>The created date time.</value>
        /// <autogeneratedoc/>
        public DateTime CreatedDateTime => Log[0].DateTime;

        /// <summary>
        /// Gets the SLA history log.
        /// </summary>
        /// <value>The log.</value>
        public ImmutableList<WorkItemSlaLogItem> Log { get; }

        /// <summary>
        /// Gets the resolution date time.
        /// </summary>
        /// <value>The resolution date time.</value>
        /// <autogeneratedoc/>
        public DateTime? ResolvedDateTime
        {
            get
            {
                var resolved = Log.LastOrDefault(p => p.State == WorkItemState.Resolved)?.DateTime;
                return (resolved == null || resolved.Value > ClosedDateTime) ? ClosedDateTime : resolved;
            }
        }

        /// <summary>
        /// Gets the resolution time in seconds.
        /// </summary>
        /// <value>The resolution time in seconds.</value>
        /// <autogeneratedoc/>
        public int ResolutionTimeInSeconds
            => (ResolvedDateTime == null) ?
                GetSecondsBetween(DateTime.Now, CreatedDateTime) :
                GetSecondsBetween(ResolvedDateTime.Value, CreatedDateTime);

        /// <summary>
        /// Gets the sla active date time.
        /// </summary>
        /// <value>The sla active date time.</value>
        /// <autogeneratedoc/>
        public DateTime? SlaActiveDateTime
                    => (!Log.Last().InSla) ? null : Log
                        .Reverse()
                        .Where(p => !p.InSla)
                        .Select(p => (DateTime?)p.DateTime)
                        .FirstOrDefault() ?? Log[0].DateTime;

        /// <summary>
        /// Gets the sla active time in seconds.
        /// </summary>
        /// <value>The sla active time in seconds.</value>
        /// <autogeneratedoc/>
        public int SlaActiveTimeInSeconds
            => SlaActiveDateTime == null ? 0 : GetSecondsBetween(SlaActiveDateTime.Value, DateTime.Now);

        /// <summary>
        /// Gets the sla suspended date time.
        /// </summary>
        /// <value>The sla suspended date time.</value>
        /// <autogeneratedoc/>
        public DateTime? SlaSuspendedDateTime
            => Log.Last().InSla ? null : Log
                .Reverse()
                .Where(p => p.InSla)
                .Select(p => (DateTime?)p.DateTime)
                .FirstOrDefault() ?? Log[0].DateTime;

        /// <summary>
        /// Gets the sla suspended time in seconds.
        /// </summary>
        /// <value>The sla suspended time in seconds.</value>
        /// <autogeneratedoc/>
        public int SlaSuspendedTimeInSeconds
            => SlaSuspendedDateTime == null ? 0 : GetSecondsBetween(SlaSuspendedDateTime.Value, DateTime.Now);

        /// <summary>
        /// Gets the acknowledgment remaining time in seconds.
        /// </summary>
        /// <param name="delaiInSeconds">The SLA acknowledgment delai in seconds.</param>
        /// <returns>The remaining time in seconds</returns>
        public int GetAcknowledgmentRemainingSeconds(int delaiInSeconds)
            => AcknowledgedDateTime != null ? 0 : delaiInSeconds - AcknowledgmentTimeInSeconds;

        /// <summary>
        /// Gets the resolution remaining time in seconds.
        /// </summary>
        /// <param name="delaiInSeconds">The SLA resolution delai in seconds.</param>
        /// <returns>The remaining time in seconds</returns>
        public int GetResolutionRemainingSeconds(int delaiInSeconds)
            => ResolvedDateTime != null ? 0 : delaiInSeconds - ResolutionTimeInSeconds;

        private static int GetSecondsBetween(DateTime start, DateTime end)
                            => (int)(end - start).TotalSeconds;
    }
}