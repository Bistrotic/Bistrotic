namespace Bistrotic.WorkItems.Infrastructure.DevOps
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    using Microsoft.TeamFoundation.WorkItemTracking.WebApi;
    using Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models;

    /// <summary>
    /// The WorkItemCollection class. Handles all the WorkItemCollection informations.
    /// </summary>
    public class WorkItemCollection : IDisposable
    {
        private bool disposedValue;
        private WorkItemTrackingHttpClient? witClient;

        public WorkItemCollection(DevOpsServer server)
        {
            Server = server;
        }

        protected DevOpsServer Server { get; }

        /// <summary>
        /// Gets the wit client.
        /// </summary>
        /// <value>The wit client.</value>
        /// <autogeneratedoc/>
        protected WorkItemTrackingHttpClient WitClient => witClient ??= Server.Connection.GetClient<WorkItemTrackingHttpClient>();

        /// <inheritdoc/>
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public async Task<WorkItem> GetWorkItem(int id, CancellationToken cancellationToken = default)
            => new WorkItem(await WitClient
                .GetWorkItemAsync(null, id, null, null, WorkItemExpand.All, null, cancellationToken)
                .ConfigureAwait(false));

        public async Task<IEnumerable<WorkItem>> GetWorkItemHistory(int id, CancellationToken cancellationToken = default)
        {
            return (await WitClient
                .GetRevisionsAsync(null, id, null, null, WorkItemExpand.All, null, cancellationToken)
                .ConfigureAwait(false))
                .Select(p => new WorkItem(p));
        }

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing">
        /// <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
        /// only unmanaged resources.
        /// </param>
        /// <autogeneratedoc/>
        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing && witClient != null)
                {
                    var client = witClient;
                    witClient = null;
                    client.Dispose();
                }

                disposedValue = true;
            }
        }
    }
}