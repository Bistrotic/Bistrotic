namespace Bistrotic.Infrastructure.MediatR.Queries
{
    using System;
    using System.Threading.Tasks;

    using Bistrotic.Application.Commands;
    using Bistrotic.Application.Messages;

    using global::MediatR;

    /// <summary>
    /// Implements the <see cref="IQueryDispatcher"/>.
    /// </summary>
    /// <seealso cref="IQueryDispatcher"/>
    /// <autogeneratedoc/>
    public class MediatRCommandBus : ICommandBus
    {
        private readonly IMediator _mediator;

        public MediatRCommandBus(IMediator mediator)
        {
            _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));
        }

        public Task Send<TCommand>(Envelope<TCommand> envelope)
            where TCommand : class => _mediator.Send(new MediatREnvelope<TCommand>(envelope));

        Task ICommandBus.Send(IEnvelope envelope)
        {
            return _mediator.Send(envelope);
        }
    }
}